{"version":3,"sources":["app.js","Directives/AccredcanPermissions/AccredcanPermissions.js","Directives/Directives.js","Library/library.js","Services/Services.js","Services/AccredcanPermissions/AccredcanPermissions.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.js","sourcesContent":["(function () {\n\n    angular.module('accredcan.permissions', [\n        'accredcan.permissions.library',\n        'accredcan.permissions.directives',\n        'accredcan.permissions.services'\n    ]);\n\n})();","(function () {\n\n    angular.module('accredcan.permissions.directives.accredcanPermissions', [\n\n    ]);\n\t\n\tangular.module('accredcan.permissions.directives.accredcanPermissions')\n\t\t.directive('accredcanPermissions', AccredcanPermissionsDirective);\n\t\t\n\tAccredcanPermissionsDirective.$inject = ['accredcanPermissions'];\n\t\n\tfunction AccredcanPermissionsDirective(accredcanPermissions) {\n\t\n        return {\n            restrict: 'A',\n            link: AppPermissionsDirectiveLink\n        };\n        \n        function AppPermissionsDirectiveLink(scope, element, attrs) {\n    \n\t\t\t// set config values from attrs or default\n\t\t\tvar _permissions = attrs.accredcanPermissions || [];\n\t\t\tvar _reverse = typeof attrs.accredcanPermissionsReverse !== 'undefined' ? true : false;\n\t\t\t\n\t\t\t// if permissions met condition, hide element \n\t\t\t// otherwise, show it\n\t\t\tif (accredcanPermissions.hasPermission(JSON.parse(_permissions)) == _reverse) {\n\t\t\t\telement.hide();\n\t\t\t} else {\n\t\t\t\telement.show();\n\t\t\t}\n\t\t\t\n\t\t\t// bind event when new permissions set within service\n\t\t\tvar unbind = scope.$on('accredcanPermissionsSet', function () {\n\t\t\t\tif (accredcanPermissions.hasPermission(JSON.parse(_permissions)) == _permissions) {\n\t\t\t\t\telement.hide();\n\t\t\t\t} else {\n\t\t\t\t\telement.show();\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\t// on element destroy event, remove bindings\n\t\t\t// only really need this if unbind was attached to rootscrope\n\t\t\t// otherwise it will be cleaned up automatically when scope is \n\t\t\t// destroyed. none the less, still here.\n\t\t\tscope.$on('$destroy', unbind);\n\t\t}\n        \n    }\n    \n})();","(function () {\n\n    angular.module('accredcan.permissions.directives', [\n        'accredcan.permissions.directives.accredcanPermissions'\n    ]);\n\n})();","(function () {\n\n    angular.module('accredcan.permissions.library', [\n        'ng'\n    ]);\n\n})();","(function () {\n\n    angular.module('accredcan.permissions.services', [\n        'accredcan.permissions.services.accredcanPermissions'\n    ]);\n\n})();","(function () {\n\n    angular.module('accredcan.permissions.services.accredcanPermissions', [\n\n    ]);\n\t\n\tangular.module('accredcan.permissions.services.accredcanPermissions')\n\t\t.service('accredcanPermissions', AccredcanPermissionsService);\n\t\t\n\tAccredcanPermissionsService.$inject = ['$rootScope'];\n\t\n\tfunction AccredcanPermissionsService($rootScope) {\n\n        // private parameters, set none to start\n        var _permissions = [];\n\n        // methods\n        this.getPermissions = GetPermissions;\n        this.setPermissions = SetPermissions;\n        this.hasPermission = HasPermission;\n\n        // get list of accepted permissions\n        function GetPermissions() {\n            return _permissions;\n        }\n\n        // set list of accepted permissions\n        function SetPermissions(permissions) {\n            _permissions = permissions;\n            $rootScope.$emit('accredcanPermissionsSet');\n        }\n\n        // check if has permission against \n        // supplied array of permisions\n        function HasPermission(permissions) {\n\n            // set to false by default\n            var permission = false;\n\n            // loop through private permissions array\n            // and set permission true if exists from \n            // passed value\n            for (var i = 0; i < permissions.length; i++) {\n                var index = _permissions.indexOf(permissions[i]);\n\n                // if it exists, set true and end loop\n                if (index != -1) {\n                    permission = true;\n                    break;\n                }\n            }\n\n            // return boolean value\n            return permission;\n        }\n\n    }\n    \n})();"],"sourceRoot":"/source/"}