{
  "name": "Accreditation Canada AngularJS Permissions",
  "tagline": "AngularJS directive for Accreditation Canada website application permissions module.",
  "body": "# Accreditation Canada AngularJS Permissions\r\n[AngularJS] directive for [Accreditation Canada] website application permissions module.\r\n\r\n##Table of Contents\r\n- [Getting Started](#getting-started)\r\n - [Installation](#installation)\r\n - [How to Use](#how-to-use)\r\n- [Contributing](#contributing)\r\n - [Prerequisites](#prerequisites)\r\n - [Clone Repository](#clone-repository)\r\n - [Directory Layout](#directory-layout)\r\n - [Install Dependencies](#install-dependencies)\r\n - [Updating Dependencies](#updating-dependencies)\r\n - [Building App Files](#building-app-files)\r\n - [Running Web Server](#running-web-server)\r\n- [Contact](#contact)\r\n\r\n##Getting Started\r\n\r\n###Installation\r\nYou can use [bower] or [npm] to install into your [AngularJS] application.\r\n```\r\nbower install accredcan-angularjs-permissions\r\n```\r\n\r\nOR\r\n\r\n```\r\nnpm install accredcan-angularjs-permissions\r\n```\r\n\r\n###How to Use\r\nYou can use the attributes `accredcan-permissions` and `accredcan-permissions-reverse` on any HTML element to show/hide elements based on set permissions.\r\n```HTML\r\n<!-- use accredcan-permissions to specifiy what permissions are required -->\r\n<button accredcan-permissions='[\"admin\"]'>Admin User</button>\r\n\r\n<!-- include accredcan-permissions-reverse to reverse logic -->\r\n<button accredcan-permissions='[\"admin\"]' accredcan-permissions-reverse>Not Admin User</button>\r\n```\r\n\r\nYou can use the `accredcanPermissions` service with the methods `set`, `get` and `has` permission(s).\r\n```JavaScript\r\n// set user permissions\r\naccredcanPermissions.set([\"user\", \"admin\"]);\r\n\r\n// get user permissions\r\nvar array = accredcanPermissions.get();\r\n\r\n// has user permissions\r\nif (accredcanPermissions.has([\"admin\"])\r\n  return true;\r\nelse \r\n  return false;\r\n```\r\n\r\n##Contributing\r\n\r\n###Prerequisites\r\nYou will need [git] to clone the template repository. We also use a number of [node.js] tools for development. You must have [node.js] and its package manager [npm] installed.\r\n\r\nIt is also recommended that you install [bower] and [gulp] globally using [npm]\r\n```\r\nnpm install bower gulp -g\r\n```\r\n\r\n###Clone Repository\r\nTo get you started you can simply clone the master branch from the accredcan/angularjs-permissios repository and install the dependencies:\r\n\r\nClone the template repository using [git]:\r\n```\r\ngit clone https://github.com/accredcan/angularjs-permissions.git\r\ncd angularjs-permissions\r\n```\r\n\r\nIf you just want to start a new project without the commit history then you can do:\r\n```\r\ngit clone --depth=1 https://github.com/accredcan/angularjs-permissions.git <your-project-name>\r\n```\r\nThe depth=1 tells git to only pull down one commit worth of historical data.\r\n\r\n###Directory Layout\r\n```\r\nDirectives/           --> app directive source code\r\nLibrary/              --> app library source code (only Library.js included in app build)\r\nServices/             --> app service source code\r\napp.js                --> app main module source code (use as starting point)\r\nbower.json            --> dependency package manager\r\ngulpfile.js           --> build task manager\r\nindex.html            --> example code (turn into gh-pages)\r\nLICENSE               --> MIT license information\r\npackage.json          --> development package manager\r\nREADME.md             --> documentation\r\n```\r\n\r\n###Install Dependencies\r\nWe have two kinds of dependencies in this project; [npm] for server-side tools and [bower] for client-side libraries. The server-side dependencies help us manage the application development such as automated build process well the client-side dependencies are for frameworks like [AngularJS].\r\n- We get the server-side dependencies via [npm], the node package manager.\r\n- We get the client-side dependencies via [bower], a client-side code package manager.\r\n\r\nWe have preconfigured [npm] to automatically run [bower] so we can simply do:\r\n```\r\nnpm install\r\n```\r\n\r\nBehind the scenes this will also call `bower install`. You should find that you have two new folders in the root directory.\r\n- `node_modules` - contains the npm packages for the tools we need\r\n- `bower_components` - contains the framework files\r\n\r\n###Updating Dependencies\r\nSince the framework libraries and development tools are acquired through package managers ([npm] and [bower]) you can use these tools to update the dependencies.\r\n\r\nYou can update the development tool dependencies by running:\r\n```\r\nnpm update\r\n```\r\nThis will find the latest versions that match the version ranges specified in the `package.json` file.\r\n\r\nYou can update the client-side dependencies by running:\r\n```\r\nbower update\r\n```\r\nThis will find the latest versions that match the version ranges specified in the `bower.json` file.\r\n\r\n###Building App Files\r\nThe build process is run using the node.js tool [gulp]. It is a task automation tool and this project has been preconfigured with all the tasks needed. You can see the full list of tasks within the root file `gulpfile.js`.\r\n\r\nYou can use gulp to build the application files by running:\r\n```\r\ngulp\r\n```\r\nThis will run through the entire build process creating everything needed to run the application and place it under the `build` directory and `fonts` directory if you have any font dependencies as well. Note that the `index.html` file already references the build output.\r\n\r\nAnother very useful [gulp] command is `watch` which will allow [gulp] to automatically rebuild any part of the application that changes as you are development. You can enable this by running:\r\n```\r\ngulp watch\r\n```\r\n\r\nYou can do more with gulp by running any of the following commands:\r\n```\r\n// clean the output directories\r\n// ./build/*\r\n// ./fonts/*\r\ngulp clean\r\n\r\n// build app html template files\r\n// ./build/templates.js\r\ngulp appTemplates\r\n\r\n// build app script files\r\n// ./build/app.js\r\ngulp appScripts\r\n\r\n// build app style files\r\n// ./build/app.css\r\ngulp appStyles\r\n\r\n// build library script files\r\n// ./build/lib.js\r\ngulp libScripts\r\n\r\n// build library style files\r\n// ./build/lib.css\r\ngulp libStyles\r\n\r\n// build library locale files\r\n// ./build/i18n/*\r\ngulp libLocale\r\n\r\n// build library font files\r\n// ./fonts/*\r\ngulp libFonts\r\n```\r\n\r\n###Running Web Server\r\nYou can use a local development web server like [http-server] which is a nodejs tool. You can install [http-server] globally by running:\r\n```\r\nnpm install -g live-server\r\n```\r\n\r\nThen you can start your own development web server to serve static files from a folder by running:\r\n```\r\nlive-server\r\n```\r\n\r\nAlternatively, you can choose to configure your own webserver, such as IIS, apache or nginx. Just configure your server to serve the files under the root directory, `./`.\r\n\r\n##Contact\r\nFor more information on Accreditation Canada, check out https://accreditation.ca/. For more information on AngularJS please check out http://angularjs.org/. For more information on jQuery, check out https://jquery.com/.\r\n\r\n[Accreditation Canada]: https://accreditation.ca\r\n[AngularJS]: https://angularjs.org\r\n[bower]: http://bower.io\r\n[git]: https://git-scm.com\r\n[gulp]: http://gulpjs.com\r\n[http-server]: https://github.com/indexzero/http-server\r\n[node.js]: https://nodejs.org/\r\n[npm]: https://www.npmjs.com\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}